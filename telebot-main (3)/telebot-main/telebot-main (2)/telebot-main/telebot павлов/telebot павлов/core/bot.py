import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Message
from .database import Database
from random import choice

class Bot(telebot.TeleBot):
    def __init__(self,token):
        super().__init__(token)
        self.stickers = {
            'random-stickers': [
                'CAACAgIAAxkBAAIfRWSVUcVX3AABU02VQyxVmE9zd1AUywAC-QADMNSdEV9oXriavOrNLwQ',
                'CAACAgIAAxkBAAIfSGSVUhjZZMuyagnnd1iusmerWJrcAAJCGAACSojYSKKZR2ZssoJNLwQ',
                'CAACAgIAAxkBAAIfS2SVUjANpY4-C3KoUF89KUu_K6jQAAJJGAACGCKQSDuHUIp7j3NxLwQ',
                'CAACAgIAAxkBAAIfTmSVUlw4wE0qJyuJ7i-GtGHlC8dBAAIwFwAC50lhSIk6js731-HJLwQ',
                'CAACAgIAAxkBAAIfUWSVUndQFgJ7Jedj3uXMBJj8Sm5YAAJHFwACDSBgSBd4qt6HdNncLwQ'],
                'calculator' : 'CAACAgIAAxkBAAIgcGSaqSAPpzNHKoLLPdUKqkPmaGkVAAKBAAP3AsgPyLR_MsoxYSgvBA'
        }
        self.database = Database('user.json')
        self.featuresMarkup=ReplyKeyboardMarkup(resize_keyboard=True,row_width=2)
        self.featuresMarkup.add(
            KeyboardButton('ü§ó–≤–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞'),
            KeyboardButton('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'),
            KeyboardButton('üíñ9 –∂–∏–∑–Ω–µ–π'),
            KeyboardButton('üòÆ–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ'),
            KeyboardButton('üé¨–†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä'),
            KeyboardButton('üò∂‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        )
        self.calculatorMarkup=ReplyKeyboardMarkup(resize_keyboard=True)
        self.calculatorMarkup.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        self.register_message_handler(callback=self.on_start,commands=['start'])

        self.register_message_handler(callback=self.on_other_message)
    
    def on_start(self,message):
        userId = message.from_user.id

        if self.database.user_exists(userId):
            name=message.from_user.full_name
            self.send_message(userId,'–ü—Ä–∏–≤–µ—Ç!'+name)
        else:
            self.database.create_user(userId)
            self.send_message(
                userId,
                '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç!',
                reply_markup=self.featuresMarkup
            )
    def info(self,message):
        userId = message.from_user.id
        self.send_message(
                userId,
                '—ç—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç',
                reply_markup=self.featuresMarkup
            )   
    def on_other_message(self,message):
        userId = message.from_user.id
        userState = self.database.get_user(userId)['state']
        if userState == 'calculator1':
            self.on_calculator_state(userId,message.text)
        else:
            self.on_none_state(userId, message.text, message.from_user.first_name)
    def on_calculator_state(self,userId,text):
        if text == '–û—Ç–º–µ–Ω–∞':
            markup = self.featuresMarkup
            message = '–ß–µ–º —Ç–µ–ø–µ—Ä—å –∑–∞–π–º—ë–º—Å—è'
            self.database.update_user(userId,state='menu')
        else:
            markup=self.calculatorMarkup
            try:
                resault = eval(text.replace('^','**').replace(':','/'))
                message = f'–æ—Ç–≤–µ—Ç:{resault}.'
            except ZeroDivisionError:
                message = '–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å'
            except Exception:
                message = '–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä'
    
    def on_none_state(self,userId,text,name):
        if text == 'ü§ó–≤–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞':
            pass
        elif text ==  '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä':
            self.database.update_user(userId,state='calculator1')
            self.send_message(userId,'–•–æ—Ä–æ—à–æ,–Ω–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä',reply_markup.calculatorMarkup)
        self.send_sticker(userId,self.stickers['calculator'])
        elif text ==  'üíñ9 –∂–∏–∑–Ω–µ–π':
            pass
        elif text ==  'üòÆ–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ':
            pass
        elif text ==  'üé¨–†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä':
            self.send_sticker(userId,choice(self.stickers['random-stickers']))
        elif text ==  'üò∂‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            text=f'id:{userId}\n'
            text+=f'–ò–º—è:{name}\n'
            self.send_message(userId,text,reply_markup=self.featuresMarkup)
        else:
            self.send_message(userId,'—è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!',reply_markup=self.featuresMarkup)