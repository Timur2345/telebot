from .database import Database
from telebot.types import (InlineKeyboardMarkup, InlineKeyboardButton, Message,
                           ReplyKeyboardMarkup, KeyboardButton, CallbackQuery)
import telebot

from random import randint, choice
from threading import Thread
from time import sleep
import requests
import urllib
import re

words = ['–ø–∏—Ü—Ü–∞', '–∞–Ω–≥–µ–ª', '–º–∏—Ä–∞–∂', '–Ω–æ—Å–∫–∏', '–≤—ã–¥—Ä–∞', '–ø–µ—Ç—É—Ö']
heartSymbol = u'\u2764'


class Bot(telebot.TeleBot):
    def __init__(self, token: str) -> None:
        super().__init__(token)

        self.database = Database('users.json')
        self.url = 'http://www.youtube.com/results?'
        self.pattern = re.compile(r'watch\?v=(\S{11})')
        self.stickers = {
            'pentagon': 'CAACAgIAAxkBAAEHoKBj4nxkZeZhnGBhn1-I2YMoxcauKAACrhQAAkOwIEtbmzCLsmAXoy4E',
            'calculator': 'CAACAgEAAxkBAAEHoJ5j4nwuhXGVUA3rL-hbogOAK4NZGAACRAIAAlGXOER2LcORTkW25y4E',
            'random-stickers': [
                'CAACAgIAAxkBAAEHoNxj4okqeUbzPnOPgXLrDUv05ktkHQACkSQAApF0aUhwTsMhNeo6xi4E',
                'CAACAgIAAxkBAAEHoNpj4okopzGJdwABRNMxv-yEtP1MmdUAAlcbAAKaMdBKh4jNhDabJfQuBA',
                'CAACAgIAAxkBAAEHoNhj4okiu-msDO_3sKY-cAt75xMZwQACfR8AAnEJ0EpQ7a2B5RjDZi4E',
                'CAACAgIAAxkBAAEHoNVj4okex7BiWDoHlCJuat6MBf2ySgACZRoAAntC0Eo6YutiV3MSei4E',
            ],
            'error': 'CAACAgIAAxkBAAEEtVlifCQm1Xk-stbixF48nKF5Zti2lAACwxMAAm3oEEqGY8B94dy6NCQE',
        }

        self.cancelMarkup = ReplyKeyboardMarkup(resize_keyboard=True)
        self.cancelMarkup.add(KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))
        self.pentagonMarkup = InlineKeyboardMarkup()
        self.pentagonMarkup.add(
            InlineKeyboardButton('–ù–∞—á–∞—Ç—å', callback_data="pentagon-yes"),
            InlineKeyboardButton('–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª', callback_data="pentagon-no")
        )
        self.featuresMarkup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        self.featuresMarkup.add(
            KeyboardButton('üëÆ‚Äç –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞'),
            KeyboardButton('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'),
            KeyboardButton('ü§Ø –†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä'),
            KeyboardButton('‚ùì –ò–≥—Ä–∞ "9 –∂–∏–∑–Ω–µ–π"'),
            KeyboardButton('üé• –ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ'),
            KeyboardButton('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
        )

        self.register_message_handler(
            callback=self.on_start,
            commands=['start']
        )
        self.register_message_handler(
            callback=self.on_other_messages
        )

        self.register_callback_query_handler(
            callback=self.on_pentagon_call,
            func=lambda call: 'pentagon' in call.data,
        )

    def on_start(self, message: Message) -> None:
        userId = message.from_user.id

        if self.database.user_exists(userId):
            self.send_message(userId, '–ü—Ä–∏–≤–µ—Ç!')
        else:
            self.database.create_user(userId)
            self.send_message(
                userId,
                '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç!',
                reply_markup=self.featuresMarkup
            )

    def on_other_messages(self, message: Message) -> None:
        userId = message.from_user.id
        userState = self.database.get_user(userId)['state']

        if userState == 'pentagon':
            self.on_pentagon_state(userId)
        elif userState == 'calculator':
            self.on_calculator_state(userId, message.text)
        elif userState == 'video':
            self.on_video_state(userId, message.text)
        elif userState == 'game-secret-word':
            self.on_game_secret_word_state(userId, message.text)
        else:
            self.on_none_state(userId, message.text, message.from_user.first_name)

    def on_pentagon_state(self, userId: int) -> None:
        self.send_message(
            userId,
            '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —ç—Ç–æ –æ—á–µ–Ω—å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!',
            reply_markup=self.featuresMarkup
        )

    def on_calculator_state(self, userId: int, text: str) -> None:
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            markup = self.featuresMarkup
            message = '–ß–µ–º —Ç–µ–ø–µ—Ä—å –∑–∞–π–º—ë–º—Å—è?'
            self.database.update_user(userId, state='menu')

        else:
            markup = self.cancelMarkup
            try:
                resault = eval(text.replace('^', '**').replace(':', '/'))
                message = f'–û—Ç–≤–µ—Ç: {resault}.'
            except ZeroDivisionError:
                message = '–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å!'
            except Exception:
                message = '–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä!\n–ü—Ä–∏–º–µ—Ä: (5 + 5)/2^3'

        self.send_message(userId, message, reply_markup=markup)

    def on_video_state(self, userId: int, text: str) -> None:
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            markup = self.featuresMarkup
            message = '–ß–µ–º —Ç–µ–ø–µ—Ä—å –∑–∞–π–º—ë–º—Å—è?'
            self.database.update_user(userId, state='menu')

        else:
            message = '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É'
            markup = self.cancelMarkup
            queryString = urllib.parse.urlencode({"search_query" : text})
            result = requests.get(self.url + queryString)

            if result.ok:
                body = result.text
                links = self.pattern.findall(body)[:5]
                for link in links:
                    self.send_message(
                        userId,
                        'http://www.youtube.com/watch?v=' + link
                    )

        self.send_message(userId, text=message, reply_markup=markup)

    def on_game_secret_word_state(self, userId: int, text: str) -> None:
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            markup = self.featuresMarkup
            message = '–ß–µ–º —Ç–µ–ø–µ—Ä—å –∑–∞–π–º—ë–º—Å—è?'
            self.database.update_user(userId, state='menu')

        else:
            text = text.lower()
            markup = self.cancelMarkup
            user = self.database.get_user(userId)
            word = list('?' * len(user['nineLivesWord']))

            for i, letter in enumerate(user['nineLivesWord'][:len(text)]):
                if user['nineLivesWord'][i] == text[i]:
                    word[i] = text[i]

            if word == user['nineLivesWord']:
                markup = self.featuresMarkup
                points = user['nineLivesHealth'] * 10
                message = f'–ü–æ–±–µ–¥–∞! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {points} –æ—á–∫–æ–≤.'
                self.database.update_user(
                    userId,
                    state=None,
                    nineLivesPoints=user['nineLivesPoints'] + points
                )

            elif user['nineLivesHealth'] > 0:
                health = user['nineLivesHealth'] - 1
                message = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã —Ç–µ—Ä—è–µ—Ç–µ –æ–¥–Ω—É –∂–∏–∑–Ω—å!\n'
                message += '–°–ª–æ–≤–æ: ' + ' '.join(word) + '\n'
                message += '–û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: ' + heartSymbol * health
                self.database.update_user(userId, nineLivesHealth=health)

            else:
                markup = self.featuresMarkup
                message = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏('
                self.database.update_user(userId, state=None)

        self.send_message(userId, message, reply_markup=markup)

    def on_none_state(self, userId: int, text: str, name: str) -> None:
        if text == 'üëÆ‚Äç –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞':
            self.database.update_user(userId, state='pentagon')
            self.send_sticker(userId, self.stickers['pentagon'])
            self.send_message(
                userId,
                '–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤—ë–º —Ä–µ—à–µ–Ω–∏–∏?',
                reply_markup=self.pentagonMarkup
            )

        elif text == 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä':
            self.database.update_user(userId, state='calculator')
            self.send_message(
                userId,
                '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø—Ä–∏–º–µ—Ä.',
                reply_markup=self.cancelMarkup
            )
            self.send_sticker(userId, self.stickers['calculator'])

        elif text == 'ü§Ø –†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä':
            self.send_sticker(userId, choice(self.stickers['random-stickers']))

        elif text == 'üé• –ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ':
            self.database.update_user(userId, state='video')
            self.send_message(
                userId,
                '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.',
                reply_markup=self.cancelMarkup
            )

        elif text == '‚ùì –ò–≥—Ä–∞ "9 –∂–∏–∑–Ω–µ–π"':
            word = choice(words)
            print(word)
            self.database.update_user(
                userId,
                state='game-secret-word',
                nineLivesWord=list(word),
                nineLivesHealth=9
            )
            message = '–≠—Ç–æ –∏–≥—Ä–∞ 9 –∂–∏–∑–Ω–µ–π, –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ!\n'
            message += '–°–ª–æ–≤–æ: ' + '? ' * len(word) + '\n'
            message += '–ñ–∏–∑–Ω–µ–π: ' + heartSymbol * 9
            self.send_message(
                userId,
                message,
                reply_markup=self.cancelMarkup
            )

        elif text == 'üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            user = self.database.get_user(userId)
            text = f'id: {userId}\n'
            text += f'–ò–º—è: {name}\n'
            text += '–û—á–∫–æ–≤ –≤ –∏–≥—Ä–µ "9 –∂–∏–∑–Ω–µ–π": ' + str(user['nineLivesPoints'])
            self.send_message(userId, text, reply_markup=self.featuresMarkup)

        else:
            self.send_message(
                userId,
                '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!',
                reply_markup=self.featuresMarkup
            )
            self.send_sticker(userId, self.stickers['error'])

    def on_pentagon_call(self, call: CallbackQuery) -> None:
        if call.data == 'pentagon-yes':
            self.answer_callback_query(call.id, '–í—ã —Å–∞–º–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ...')
            self.edit_message('üëÆ –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞... 0%', call)
            Thread(target=self.on_hacking, args=(call,)).start()

        else:
            self.database.update_user(call.from_user.id, state=None)
            self.answer_callback_query(call.id, '–í–æ—Ç –∏ —Å–ª–∞–≤–Ω–µ–Ω—å–∫–æ')
            self.edit_message('–û—Ç–º–µ–Ω–µ–Ω–æ.', call)

    def on_hacking(self, call: CallbackQuery) -> None:
        percent = 1
        while percent < 100:
            sleep(randint(5, 7) / 10)
            self.edit_message(f'üëÆ –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞... {percent}%', call)
            percent += randint(2, 5)

        self.edit_message('üëÆ –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞... 100%', call)
        sleep(2)
        if randint(0, 1):
            self.edit_message('üü¢ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!', call)
        else:
            self.edit_message('ü¶† –í—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏ –≤–∏—Ä—É—Å –Ω–∞ –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!', call)
        self.database.update_user(call.from_user.id, state='menu')

    def edit_message(
        self,
        text: str,
        call: CallbackQuery,
        markup = InlineKeyboardMarkup()
    ) -> None:
            try:
                self.edit_message_text(
                    text,
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup
                )
            except Exception:
                pass
